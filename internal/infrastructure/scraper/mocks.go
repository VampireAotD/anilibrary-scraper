// Code generated by MockGen. DO NOT EDIT.
// Source: scraper.go
//
// Generated by this command:
//
//	mockgen -source=scraper.go -destination=./mocks.go -package=scraper
//

// Package scraper is a generated GoMock package.
package scraper

import (
	context "context"
	reflect "reflect"

	goquery "github.com/PuerkitoBio/goquery"
	model "github.com/VampireAotD/anilibrary-scraper/internal/infrastructure/scraper/model"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// HTML mocks base method.
func (m *MockHTTPClient) HTML(ctx context.Context, url string) (*goquery.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML", ctx, url)
	ret0, _ := ret[0].(*goquery.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTML indicates an expected call of HTML.
func (mr *MockHTTPClientMockRecorder) HTML(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockHTTPClient)(nil).HTML), ctx, url)
}

// Image mocks base method.
func (m *MockHTTPClient) Image(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Image indicates an expected call of Image.
func (mr *MockHTTPClientMockRecorder) Image(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockHTTPClient)(nil).Image), ctx, url)
}

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
	isgomock struct{}
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ImageURL mocks base method.
func (m *MockParser) ImageURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ImageURL indicates an expected call of ImageURL.
func (mr *MockParserMockRecorder) ImageURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageURL", reflect.TypeOf((*MockParser)(nil).ImageURL))
}

// Parse mocks base method.
func (m *MockParser) Parse() model.Anime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(model.Anime)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse))
}
