// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	entity "anilibrary-scraper/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockScraperService is a mock of ScraperService interface.
type MockScraperService struct {
	ctrl     *gomock.Controller
	recorder *MockScraperServiceMockRecorder
}

// MockScraperServiceMockRecorder is the mock recorder for MockScraperService.
type MockScraperServiceMockRecorder struct {
	mock *MockScraperService
}

// NewMockScraperService creates a new mock instance.
func NewMockScraperService(ctrl *gomock.Controller) *MockScraperService {
	mock := &MockScraperService{ctrl: ctrl}
	mock.recorder = &MockScraperServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraperService) EXPECT() *MockScraperServiceMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockScraperService) Process(ctx context.Context, url string) (*entity.Anime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, url)
	ret0, _ := ret[0].(*entity.Anime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockScraperServiceMockRecorder) Process(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockScraperService)(nil).Process), ctx, url)
}

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEventService) Send(ctx context.Context, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEventServiceMockRecorder) Send(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEventService)(nil).Send), ctx, url)
}
