// Code generated by MockGen. DO NOT EDIT.
// Source: scraper.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "anilibrary-request-parser/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnimeRepository is a mock of AnimeRepository interface.
type MockAnimeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnimeRepositoryMockRecorder
}

// MockAnimeRepositoryMockRecorder is the mock recorder for MockAnimeRepository.
type MockAnimeRepositoryMockRecorder struct {
	mock *MockAnimeRepository
}

// NewMockAnimeRepository creates a new mock instance.
func NewMockAnimeRepository(ctrl *gomock.Controller) *MockAnimeRepository {
	mock := &MockAnimeRepository{ctrl: ctrl}
	mock.recorder = &MockAnimeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimeRepository) EXPECT() *MockAnimeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnimeRepository) Create(ctx context.Context, key string, anime entity.Anime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, anime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAnimeRepositoryMockRecorder) Create(ctx, key, anime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnimeRepository)(nil).Create), ctx, key, anime)
}

// FindByUrl mocks base method.
func (m *MockAnimeRepository) FindByUrl(ctx context.Context, url string) (*entity.Anime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUrl", ctx, url)
	ret0, _ := ret[0].(*entity.Anime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUrl indicates an expected call of FindByUrl.
func (mr *MockAnimeRepositoryMockRecorder) FindByUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUrl", reflect.TypeOf((*MockAnimeRepository)(nil).FindByUrl), ctx, url)
}
