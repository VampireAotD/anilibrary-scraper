// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "anilibrary-scraper/internal/domain/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnimeRepository is a mock of AnimeRepository interface.
type MockAnimeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnimeRepositoryMockRecorder
}

// MockAnimeRepositoryMockRecorder is the mock recorder for MockAnimeRepository.
type MockAnimeRepositoryMockRecorder struct {
	mock *MockAnimeRepository
}

// NewMockAnimeRepository creates a new mock instance.
func NewMockAnimeRepository(ctrl *gomock.Controller) *MockAnimeRepository {
	mock := &MockAnimeRepository{ctrl: ctrl}
	mock.recorder = &MockAnimeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimeRepository) EXPECT() *MockAnimeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnimeRepository) Create(ctx context.Context, key string, anime *entity.Anime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, anime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAnimeRepositoryMockRecorder) Create(ctx, key, anime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnimeRepository)(nil).Create), ctx, key, anime)
}

// FindByURL mocks base method.
func (m *MockAnimeRepository) FindByURL(ctx context.Context, url string) (*entity.Anime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByURL", ctx, url)
	ret0, _ := ret[0].(*entity.Anime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByURL indicates an expected call of FindByURL.
func (mr *MockAnimeRepositoryMockRecorder) FindByURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByURL", reflect.TypeOf((*MockAnimeRepository)(nil).FindByURL), ctx, url)
}

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEventRepository) Send(ctx context.Context, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEventRepositoryMockRecorder) Send(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEventRepository)(nil).Send), ctx, event)
}
