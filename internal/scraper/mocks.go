// Code generated by MockGen. DO NOT EDIT.
// Source: scraper.go

// Package scraper is a generated GoMock package.
package scraper

import (
	model "anilibrary-scraper/internal/scraper/model"
	context "context"
	reflect "reflect"

	goquery "github.com/PuerkitoBio/goquery"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// HTML mocks base method.
func (m *MockHTTPClient) HTML(ctx context.Context, url string) (*goquery.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML", ctx, url)
	ret0, _ := ret[0].(*goquery.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTML indicates an expected call of HTML.
func (mr *MockHTTPClientMockRecorder) HTML(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockHTTPClient)(nil).HTML), ctx, url)
}

// Image mocks base method.
func (m *MockHTTPClient) Image(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Image", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Image indicates an expected call of Image.
func (mr *MockHTTPClientMockRecorder) Image(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Image", reflect.TypeOf((*MockHTTPClient)(nil).Image), ctx, url)
}

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Episodes mocks base method.
func (m *MockParser) Episodes() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Episodes")
	ret0, _ := ret[0].(string)
	return ret0
}

// Episodes indicates an expected call of Episodes.
func (mr *MockParserMockRecorder) Episodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Episodes", reflect.TypeOf((*MockParser)(nil).Episodes))
}

// Genres mocks base method.
func (m *MockParser) Genres() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genres")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Genres indicates an expected call of Genres.
func (mr *MockParserMockRecorder) Genres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genres", reflect.TypeOf((*MockParser)(nil).Genres))
}

// ImageURL mocks base method.
func (m *MockParser) ImageURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// ImageURL indicates an expected call of ImageURL.
func (mr *MockParserMockRecorder) ImageURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageURL", reflect.TypeOf((*MockParser)(nil).ImageURL))
}

// Rating mocks base method.
func (m *MockParser) Rating() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rating")
	ret0, _ := ret[0].(float32)
	return ret0
}

// Rating indicates an expected call of Rating.
func (mr *MockParserMockRecorder) Rating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rating", reflect.TypeOf((*MockParser)(nil).Rating))
}

// Status mocks base method.
func (m *MockParser) Status() model.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(model.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockParserMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockParser)(nil).Status))
}

// Synonyms mocks base method.
func (m *MockParser) Synonyms() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synonyms")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Synonyms indicates an expected call of Synonyms.
func (mr *MockParserMockRecorder) Synonyms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synonyms", reflect.TypeOf((*MockParser)(nil).Synonyms))
}

// Title mocks base method.
func (m *MockParser) Title() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(string)
	return ret0
}

// Title indicates an expected call of Title.
func (mr *MockParserMockRecorder) Title() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockParser)(nil).Title))
}

// Type mocks base method.
func (m *MockParser) Type() model.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(model.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockParserMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockParser)(nil).Type))
}

// VoiceActing mocks base method.
func (m *MockParser) VoiceActing() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoiceActing")
	ret0, _ := ret[0].([]string)
	return ret0
}

// VoiceActing indicates an expected call of VoiceActing.
func (mr *MockParserMockRecorder) VoiceActing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoiceActing", reflect.TypeOf((*MockParser)(nil).VoiceActing))
}

// Year mocks base method.
func (m *MockParser) Year() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Year")
	ret0, _ := ret[0].(int)
	return ret0
}

// Year indicates an expected call of Year.
func (mr *MockParserMockRecorder) Year() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Year", reflect.TypeOf((*MockParser)(nil).Year))
}
