// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package scraper is a generated GoMock package.
package scraper

import (
	entity "anilibrary-scraper/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContract is a mock of Contract interface.
type MockContract struct {
	ctrl     *gomock.Controller
	recorder *MockContractMockRecorder
}

// MockContractMockRecorder is the mock recorder for MockContract.
type MockContractMockRecorder struct {
	mock *MockContract
}

// NewMockContract creates a new mock instance.
func NewMockContract(ctrl *gomock.Controller) *MockContract {
	mock := &MockContract{ctrl: ctrl}
	mock.recorder = &MockContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContract) EXPECT() *MockContractMockRecorder {
	return m.recorder
}

// ScrapeAnime mocks base method.
func (m *MockContract) ScrapeAnime(ctx context.Context, url string) (*entity.Anime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeAnime", ctx, url)
	ret0, _ := ret[0].(*entity.Anime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeAnime indicates an expected call of ScrapeAnime.
func (mr *MockContractMockRecorder) ScrapeAnime(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeAnime", reflect.TypeOf((*MockContract)(nil).ScrapeAnime), ctx, url)
}
