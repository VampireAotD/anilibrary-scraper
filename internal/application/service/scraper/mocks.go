// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks.go -package=scraper
//

// Package scraper is a generated GoMock package.
package scraper

import (
	context "context"
	reflect "reflect"

	entity "github.com/VampireAotD/anilibrary-scraper/internal/domain/entity"
	model "github.com/VampireAotD/anilibrary-scraper/internal/infrastructure/repository/model"
	gomock "go.uber.org/mock/gomock"
)

// MockScraper is a mock of Scraper interface.
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
	isgomock struct{}
}

// MockScraperMockRecorder is the mock recorder for MockScraper.
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance.
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// ScrapeAnime mocks base method.
func (m *MockScraper) ScrapeAnime(ctx context.Context, url string) (entity.Anime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeAnime", ctx, url)
	ret0, _ := ret[0].(entity.Anime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeAnime indicates an expected call of ScrapeAnime.
func (mr *MockScraperMockRecorder) ScrapeAnime(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeAnime", reflect.TypeOf((*MockScraper)(nil).ScrapeAnime), ctx, url)
}

// MockAnimeRepository is a mock of AnimeRepository interface.
type MockAnimeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAnimeRepositoryMockRecorder
	isgomock struct{}
}

// MockAnimeRepositoryMockRecorder is the mock recorder for MockAnimeRepository.
type MockAnimeRepositoryMockRecorder struct {
	mock *MockAnimeRepository
}

// NewMockAnimeRepository creates a new mock instance.
func NewMockAnimeRepository(ctrl *gomock.Controller) *MockAnimeRepository {
	mock := &MockAnimeRepository{ctrl: ctrl}
	mock.recorder = &MockAnimeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimeRepository) EXPECT() *MockAnimeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnimeRepository) Create(ctx context.Context, anime model.Anime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, anime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAnimeRepositoryMockRecorder) Create(ctx, anime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnimeRepository)(nil).Create), ctx, anime)
}

// FindByURL mocks base method.
func (m *MockAnimeRepository) FindByURL(ctx context.Context, url string) (entity.Anime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByURL", ctx, url)
	ret0, _ := ret[0].(entity.Anime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByURL indicates an expected call of FindByURL.
func (mr *MockAnimeRepositoryMockRecorder) FindByURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByURL", reflect.TypeOf((*MockAnimeRepository)(nil).FindByURL), ctx, url)
}
