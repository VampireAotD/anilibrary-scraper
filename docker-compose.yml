version: '3.9'

services:
  redis:
    image: redis:latest
    container_name: anilibrary-scraper-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT:-6380}:6379
    environment:
      REDIS_REPLICATION_MODE: master
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 2s
      timeout: 2s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - local

  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./build/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1
      interval: 2s
      timeout: 2s
      retries: 5
    networks:
      - local

  grafana:
    image: grafana/grafana:9.3.1
    depends_on:
      prometheus:
        condition: service_healthy
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ALLOW_SING_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./build/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./build/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - local

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14269:14269"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:14269 || exit 1
      interval: 2s
      timeout: 2s
      retries: 5
    networks:
      - local

  app:
    depends_on:
      redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: anilibrary-scraper
    build:
      context: .
      args:
        TIMEZONE: ${TIMEZONE:-Europe/Kiev}
    env_file:
      - .env
    volumes:
      - ./storage:/storage
    ports:
      - "8080:8080"
    networks:
      - local
      - shared

networks:
  local:
    driver: bridge
  shared:
    name: anilibrary
    external: true

volumes:
  redis-data:
  grafana-data: